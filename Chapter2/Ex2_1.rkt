#lang sicp

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define (make-rat n d) (cons n d))
(define (numer x) (car x))
(define (denom x) (cdr x))

(define (mul-rat x y)
  (cond ((or (and (> x 0) (> y 0))
             (and (< x 0) (< y 0))) (make-rat (* (numer x) (numer y))
                                              (* (denom x) (denom y))))
        (else (make-rat (* (numer x) (numer y))
                        (* (denom x) (denom y))))))