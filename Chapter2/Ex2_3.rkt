#lang sicp

(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (make-segment start end) (cons start end))
(define (start-segment s) (car s))
(define (end-segment s) (cdr s))
(define (midpoint-segment s)
  (make-point (+ (x-point (start-segment s)) (/ (- (x-point (end-segment s)) (x-point (start-segment s))) 2))
              (+ (y-point (start-segment s)) (/ (- (y-point (end-segment s)) (y-point (start-segment s))) 2))))

(define (print-point p)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")")
  (newline))


(define (make-rect top-left bottom-right)
  (cons top-left bottom-right))
(define (top-left rect)
  (car rect))
(define (bottom-right rect)
  (cdr rect))
(define (width rect)
  (- (x-point (bottom-right rect)) (x-point (top-left rect))))
(define (height rect)
  (- (y-point (top-left rect)) (y-point (bottom-right rect))))
(define (perimeter rect)
  (+ (width rect) (width rect) (height rect) (height rect)))
(define (square rect)
  (* (width rect) (height rect)))

(define (make-rect2 bottom-left width height)
  (cons bottom-left (cons width height)))
(define (bottom-left2 rect)
  (car rect))
(define (width2 rect)
  (car (cdr rect)))
(define (height2 rect)
  (cdr (cdr rect)))
(define (perimeter2 rect)
  (+ (width2 rect) (width2 rect) (height2 rect) (height2 rect)))
(define (square2 rect)
  (* (width2 rect) (height2 rect)))


(define r1 (make-rect (make-point 1 3) (make-point 4 1)))
(define r2 (make-rect2 (make-point 1 1) 3 2))
(display "r1 perimeter: ")
(perimeter r1)
(display "r2 perimeter: ")
(perimeter2 r2)
(display "r1 square ")
(square r1)
(display "r2 square ")
(square2 r2)

